<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <title>Public Gallery</title>
  <style>
    body { font-family: system-ui, sans-serif; max-width: 1080px; margin: 20px auto; }
    h2 { margin-bottom: 14px; }
    .grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(220px,1fr)); gap: 14px; }
    .card { border: 1px solid #ddd; padding: 10px; border-radius: 10px; background: #fafafa; display:flex; flex-direction:column; gap:10px; }
    img { width: 100%; height: 180px; object-fit: cover; border-radius: 8px; }
    .meta { font-size: 12px; color: #555; }
    .comments { margin-top: 2px; padding-top: 8px; border-top: 1px solid #eee; display:flex; flex-direction:column; gap:6px; }
    .comment { font-size: 13px; color: #333; background:#fff; border:1px solid #eee; border-radius:8px; padding:6px 8px; }
    .comment .by { color:#777; font-size: 11px; margin-left: 6px; }
    .muted { color:#888; font-size:12px; }
    .row { display:flex; gap:8px; align-items:center; }
    .row input[type="text"] { flex:1; padding:8px 10px; border:1px solid #ddd; border-radius:8px; }
    .row button { padding:8px 10px; border:0; background:#111; color:#fff; border-radius:8px; cursor:pointer; }
    .row button:disabled { opacity:.6; cursor:not-allowed; }
    .toolbar { display:flex; justify-content:space-between; align-items:center; }
    .link { text-decoration:none; color:#111; font-weight:600; }
    .pill { font-size:11px; color:#555; background:#eee; padding:2px 8px; border-radius:999px; }
    .actions { display:flex; gap:8px; }
    .ghost { background:transparent; border:1px solid #ddd; color:#333; }
  </style>
</head>
<body>
  <h2>üåç Public Gallery</h2>

  <div class="grid">
    <% images.forEach(function(img){ 
         const imgId = String(img._id);
         const initialComments = (img.comments || []).slice(0, 3); // ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
         const hasMore = (img.comments || []).length > initialComments.length;
    %>
      <div class="card" data-image-id="<%= imgId %>">
        <a class="link" href="/images/<%= imgId %>">
          <img src="<%= img.url %>" alt="<%= img.originalName %>">
        </a>

        <div class="toolbar">
          <div>
            <div><strong><%= img.originalName %></strong></div>
            <div class="muted">
              <span class="pill"><%= img.isPublic ? "Public" : "Private" %></span>
              <% if (img.description) { %>
                ‚Ä¢ <%= img.description %>
              <% } %>
            </div>
          </div>
          <a class="link" href="/images/<%= imgId %>">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</a>
        </div>

        <div class="comments" id="comments-<%= imgId %>">
          <% if (initialComments.length > 0) { %>
            <% initialComments.forEach(function(c){ %>
              <div class="comment" data-comment-id="<%= c._id %>">
                <span><%= c.text %></span>
                <span class="by">- <%= (c.userId && c.userId.name) ? c.userId.name : 'Anonymous' %></span>
              </div>
            <% }) %>
          <% } else { %>
            <div class="muted no-comments">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå</div>
          <% } %>
        </div>

        <div class="actions">
          <% if (hasMore) { %>
            <button class="ghost" data-action="load-more" data-loaded="3" data-total="<%= (img.comments || []).length %>">‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
          <% } %>
        </div>

        <form class="row" data-action="add-comment" onsubmit="return false;">
          <input type="text" name="text" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå..." required />
          <button type="submit">‡∏™‡πà‡∏á</button>
        </form>
        <div class="muted" data-role="msg"></div>
      </div>
    <% }) %>
  </div>
  <form action="/api/gallery/public" method="get" class="mb-4">
    <input 
    type="text" 
    name="q" 
    value="<%= query || '' %>" 
    placeholder="Search description..." 
    class="border p-2 rounded w-64"
    />
    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">
    Search
    </button>
  </form>
  <script>
    // helper: element.closest polyfill not needed on modern browsers
    function qs(root, sel){ return root.querySelector(sel); }

    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πå‡∏î
    document.addEventListener('submit', async (e) => {
      const form = e.target.closest('form[data-action="add-comment"]');
      if (!form) return;

      const card = form.closest('.card');
      const imageId = card.dataset.imageId;
      const msg = qs(card, '[data-role="msg"]');
      const input = form.querySelector('input[name="text"]');
      const btn = form.querySelector('button[type="submit"]');
      const list = qs(card, '#comments-' + imageId);

      const text = (input.value || '').trim();
      if (!text) { msg.textContent = '‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á'; return; }

      btn.disabled = true; msg.textContent = '';

      try {
        const res = await fetch(`/api/comments/${imageId}`, {
          method: 'POST',
          headers: {
            'Content-Type':'application/json',
            // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Bearer:
            // 'Authorization': 'Bearer ' + (localStorage.getItem('token') || '')
          },
          body: JSON.stringify({ text })
        });

        const data = await res.json();
        if (!res.ok) throw new Error(data?.message || '‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        // ‡∏•‡∏ö "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå"
        const empty = list.querySelector('.no-comments');
        if (empty) empty.remove();

        // prepend ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
        const div = document.createElement('div');
        div.className = 'comment';
        div.dataset.commentId = data.comment._id;
        div.innerHTML = `<span>${data.comment.text}</span> <span class="by">- ‡∏Ñ‡∏∏‡∏ì</span>`;
        list.prepend(div);

        input.value = '';
        msg.textContent = '‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      } catch (err) {
        msg.textContent = err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
      } finally {
        btn.disabled = false;
      }
    });

    // ‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°" ‚Äî ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÜ (‡∏ó‡∏µ‡∏•‡∏∞ 5) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ API GET /api/comments/:imageId
    document.addEventListener('click', async (e) => {
      const btn = e.target.closest('button[data-action="load-more"]');
      if (!btn) return;

      const card = btn.closest('.card');
      const imageId = card.dataset.imageId;
      const list = document.getElementById('comments-' + imageId);

      // state
      const alreadyLoaded = parseInt(btn.getAttribute('data-loaded') || '0', 10);
      const total = parseInt(btn.getAttribute('data-total') || '0', 10);
      const pageSize = 5;

      btn.disabled = true; btn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...';

      try {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå‡∏Ñ‡∏∏‡∏ì (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ controller ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
        // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° query ‡πÄ‡∏ä‡πà‡∏ô ?skip=3&limit=5 ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏õ‡∏£‡∏±‡∏ö controller ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        // ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß slice ‡∏ù‡∏±‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        const res = await fetch(`/api/comments/${imageId}`);
        const data = await res.json();
        if (!res.ok) throw new Error(data?.message || '‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        const comments = data.comments || [];
        const next = comments.slice(alreadyLoaded, alreadyLoaded + pageSize);

        next.forEach(c => {
          const div = document.createElement('div');
          div.className = 'comment';
          div.dataset.commentId = c._id;
          const by = (c.userId && c.userId.name) ? c.userId.name : 'Anonymous';
          div.innerHTML = `<span>${c.text}</span> <span class="by">- ${by}</span>`;
          list.appendChild(div);
        });

        const newLoaded = alreadyLoaded + next.length;
        btn.setAttribute('data-loaded', String(newLoaded));

        if (newLoaded >= total || next.length === 0) {
          btn.remove(); // ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
        } else {
          btn.disabled = false;
          btn.textContent = '‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°';
        }
      } catch (err) {
        btn.disabled = false; btn.textContent = '‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°';
        alert(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }
    });
  </script>
</body>
</html>
